<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Borui</name>
    </assembly>
    <members>
        <member name="M:Borui.Common.ClassEx.ConvertEx.ToDecimal(System.String)">
            <summary>
            字符串类型转换为货币类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.ClassEx.ConvertEx.ToIList``1(System.Data.DataTable)">
            <summary>
            DataTable转换为集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:Borui.Common.ClassEx.EnumEx">
            <summary>
            枚举类型的扩展类
            </summary>
        </member>
        <member name="M:Borui.Common.ClassEx.EnumEx.GetDescriptionAttr(System.Type)">
            <summary>
            获取枚举类型的 Description 特性
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.ClassEx.NameValueCollection.Index(System.String,System.String)">
            <summary>
            索引访问
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.ClassEx.NameValueCollection.Save(System.String,System.String,System.String)">
            <summary>
            保存
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="value"></param>
        </member>
        <member name="M:Borui.Common.ClassEx.NameValueCollection.Save(System.String,System.Collections.Hashtable)">
            <summary>
            保存
            </summary>
            <param name="key1"></param>
            <param name="ht"></param>
        </member>
        <member name="T:Borui.Common.ClassEx.StringEx">
            <summary>
            字符串的扩展类
            </summary>
        </member>
        <member name="M:Borui.Common.ClassEx.StringEx.ToHashTable(System.String,System.String,System.String)">
            <summary>
            将源字符串分割成哈希表
            </summary>    
        </member>
        <member name="M:Borui.Common.ClassEx.StringEx.ToKeyValue(System.String,System.String,System.String)">
            <summary>
            将源字符串分割成键值
            </summary>    
        </member>
        <member name="M:Borui.Common.ControlEx.TabControlExMDI.SetStyles">
            <summary>
            设置样式
            </summary>
        </member>
        <member name="M:Borui.Common.ControlEx.TabControlExMDI.DrawTabContrl(System.Drawing.Graphics)">
            <summary>
            绘制 TabControl
            </summary>       
        </member>
        <member name="M:Borui.Common.ControlEx.TabControlExMDI.DrawDrawBackgroundAndHeader(System.Drawing.Graphics)">
            <summary>
            绘制工作区和头部的背景色
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Borui.Common.ControlEx.TabControlExMDI.DrawTabPages(System.Drawing.Graphics)">
            <summary>
            绘制 TabPage
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Borui.Common.ControlEx.TabControlExMDI.DrawBorder(System.Drawing.Graphics)">
            <summary>
            绘制边框
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Borui.Common.ControlEx.TabControlExMDI.RenderTabBackgroundInternal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary>
            渲染
            </summary>     
        </member>
        <member name="M:Borui.Common.ControlEx.TabControlExMDI.CreateTabPath(System.Drawing.Rectangle)">
            <summary>
            绘制 Tab 路径
            </summary>      
        </member>
        <member name="M:Borui.Common.ControlEx.TabControlExMDI.GetColor(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            计算颜色
            </summary>
        </member>
        <member name="E:Borui.Common.ControlEx.TabControlExMDI.CloseTabPage">
            <summary>
            关闭选项卡是引发：无参数无意义，只是通知而已；e（EventArgs）
            </summary>
        </member>
        <member name="E:Borui.Common.ControlEx.TabControlExMDI.RightMouseDown">
            <summary>
            在选项卡上右击，object: index；e:(EventArgs) 鼠标信息
            </summary>
        </member>
        <member name="M:Borui.Common.DatabaseTableInfo.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>
            DatabaseTableInfo
            </summary>
            <param name="dr"></param>
        </member>
        <member name="P:Borui.Common.DatabaseTableInfo.DatabaseName">
            <summary>
            数据库的名称。
            </summary>
        </member>
        <member name="P:Borui.Common.DatabaseTableInfo.TableName">
            <summary>
            请求其空间使用信息的对象的名称
            </summary>
        </member>
        <member name="P:Borui.Common.DatabaseTableInfo.RowsCount">
            <summary>
            表中现有的行数
            </summary>
        </member>
        <member name="P:Borui.Common.DatabaseTableInfo.ReservedSize">
            <summary>
            为 objname 保留的空间总量
            </summary>
        </member>
        <member name="P:Borui.Common.DatabaseTableInfo.DataSize">
            <summary>
            objname 中的数据所使用的空间总量
            </summary>
        </member>
        <member name="P:Borui.Common.DatabaseTableInfo.IndexSize">
            <summary>
            objname 中的索引所使用的空间总量
            </summary>
        </member>
        <member name="P:Borui.Common.DatabaseTableInfo.UnUsedSize">
            <summary>
            为 objname 保留但尚未使用的空间总量
            </summary>
        </member>
        <member name="T:Borui.Common.Diagnostics.CommandLineHelper">
            <summary>
            调用命令行辅助类
            </summary>
        </member>
        <member name="M:Borui.Common.Diagnostics.CommandLineHelper.Execute(System.String,System.Boolean)">
            <summary>
            执行命令
            </summary>
            <param name="command">命令名</param>
            <param name="waitForExit">是否等待命令执行完</param>
            <returns></returns>
        </member>
        <member name="T:Borui.Common.Diagnostics.WindowsService">
            <summary>
            Windows 服务
            </summary>
        </member>
        <member name="F:Borui.Common.Diagnostics.WindowsService.baseService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsService.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsService.#ctor(System.ServiceProcess.ServiceController)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="P:Borui.Common.Diagnostics.WindowsService.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Borui.Common.Diagnostics.WindowsService.Status">
            <summary>
            状态  
            </summary>
        </member>
        <member name="T:Borui.Common.Diagnostics.WindowsService.ServiceStatus">
            <summary>
            服务状态
            </summary>
        </member>
        <member name="T:Borui.Common.Diagnostics.WindowsServicesHelper">
            <summary>
            Windows 服务辅助类
            </summary>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsServicesHelper.Start(System.String)">
            <summary>
            启动服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsServicesHelper.Stop(System.String)">
            <summary>
            停止服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsServicesHelper.Restart(System.String)">
            <summary>
            重启服务
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsServicesHelper.GetServiceStatus(System.String)">
            <summary>
            获取服务的运行状态
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsServicesHelper.GetServices(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取指定的服务
            </summary>
            <param name="servicesName"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsServicesHelper.Install(System.String)">
            <summary>
            安装服务
            </summary>
            <param name="serviceFile">服务文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Diagnostics.WindowsServicesHelper.UnInstall(System.String)">
            <summary>
            卸载服务
            </summary>
            <param name="serviceFile"></param>
            <returns>服务文件路径</returns>
        </member>
        <member name="T:Borui.Common.IO.FileUtil">
            <summary>
            与【文件】有关的类
            </summary>
        </member>
        <member name="M:Borui.Common.IO.FileUtil.Run(System.String,System.Boolean)">
            <summary>
            执行可文件
            </summary>
            <param name="filePath">文件名</param>
            <param name="waitExit">是否等待文件执行完</param>
        </member>
        <member name="M:Borui.Common.IO.FileUtil.Run(System.String,System.String,System.Boolean)">
            <summary>
            执行可文件
            </summary>
            <param name="filePath">文件名</param>
            <param name="args">参数</param>
            <param name="waitExit">是否等待文件执行完</param>
        </member>
        <member name="T:Borui.Common.IO.ProcessUtil">
            <summary>
            Window service can't call external exe directly, use this class to call.
            Detail:http://msdn.microsoft.com/zh-cn/library/windows/hardware/gg463353.aspx
            </summary>
        </member>
        <member name="T:Borui.Common.Log.LogStatusCodeType">
            <summary>
            表示日志的状态
            </summary>
        </member>
        <member name="F:Borui.Common.Log.LogStatusCodeType.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Borui.Common.Log.LogStatusCodeType.Failure">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:EmailUtil">
            <summary>
            Summary description for SendMail
            </summary>
        </member>
        <member name="M:EmailUtil.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:EmailUtil.Send">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:EmailUtil.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:EmailUtil.DisplayName">
            <summary>
            发件人显示名称
            </summary>
        </member>
        <member name="P:EmailUtil.To">
            <summary>
            收件人地址
            </summary>
        </member>
        <member name="P:EmailUtil.Subject">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:EmailUtil.Body">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:EmailUtil.MailServer">
            <summary>
            Smtp 服务器
            </summary>
        </member>
        <member name="P:EmailUtil.SmtpUser">
            <summary>
            Smtp 用户名
            </summary>
        </member>
        <member name="P:EmailUtil.SmtpPassword">
            <summary>
            Smtp 密码
            </summary>
        </member>
        <member name="P:EmailUtil.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:EmailUtil.EnableSSL">
            <summary>
            是否启用SSL
            </summary>
        </member>
        <member name="P:EmailUtil.ErrorMessages">
            <summary>
            发送过程中的错误信息
            </summary>
        </member>
        <member name="P:EmailUtil.Bcc">
            <summary>
            抄送人集合
            </summary>
        </member>
        <member name="P:EmailUtil.Attachments">
            <summary>
            附件集合
            </summary>
        </member>
        <!-- 对于成员“T:Borui.Common.Net.FileStruct”忽略有格式错误的 XML 注释 -->
        <member name="F:Borui.Common.Net.FtpClient.Request">
            <summary>
            FTP请求对象
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient.Response">
            <summary>
            FTP响应对象
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient._Uri">
            <summary>
            FTP服务器地址
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient._DirectoryPath">
            <summary>
            当前工作目录
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient._UserName">
            <summary>
            FTP登录用户
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient._ErrorMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient._Password">
            <summary>
            FTP登录密码
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient._Proxy">
            <summary>
            连接FTP服务器的代理服务
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient._isDeleteTempFile">
            <summary>
            是否需要删除临时文件
            </summary>
        </member>
        <member name="F:Borui.Common.Net.FtpClient._UploadTempFile">
            <summary>
            异步上传所临时生成的文件
            </summary>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.#ctor(System.Uri,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="FtpUri">FTP地址</param>
            <param name="strUserName">登录用户名</param>
            <param name="strPassword">登录密码</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.#ctor(System.Uri,System.String,System.String,System.Net.WebProxy)">
            <summary>
            构造函数
            </summary>
            <param name="FtpUri">FTP地址</param>
            <param name="strUserName">登录用户名</param>
            <param name="strPassword">登录密码</param>
            <param name="objProxy">连接代理</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.Open(System.Uri,System.String)">
            <summary>
            建立FTP链接,返回响应对象
            </summary>
            <param name="uri">FTP地址</param>
            <param name="FtpMathod">操作命令</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.OpenRequest(System.Uri,System.String)">
            <summary>
            建立FTP链接,返回请求对象
            </summary>
            <param name="uri">FTP地址</param>
            <param name="FtpMathod">操作命令</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.DownloadFile(System.String,System.String)">
            <summary>
            从FTP服务器下载文件，使用与远程文件同名的文件名来保存文件
            </summary>
            <param name="RemoteFileName">远程文件名</param>
            <param name="LocalPath">本地路径</param> 
        </member>
        <member name="M:Borui.Common.Net.FtpClient.DownloadFile(System.String,System.String,System.String)">
            <summary>
            从FTP服务器下载文件，指定本地路径和本地文件名
            </summary>
            <param name="RemoteFileName">远程文件名</param>
            <param name="LocalPath">本地路径</param>
            <param name="LocalFilePath">保存文件的本地路径,后面带有"\"</param>
            <param name="LocalFileName">保存本地的文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.DownloadFile(System.String)">
            <summary>
            从FTP服务器下载文件，返回文件二进制数据
            </summary>
            <param name="RemoteFileName">远程文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.DownloadFileAsync(System.String,System.String,System.String)">
            <summary>
            从FTP服务器异步下载文件，指定本地路径和本地文件名
            </summary>
            <param name="RemoteFileName">远程文件名</param>        
            <param name="LocalPath">保存文件的本地路径,后面带有"\"</param>
            <param name="LocalFileName">保存本地的文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.DownloadFileAsync(System.String,System.String)">
            <summary>
            从FTP服务器异步下载文件，指定本地完整路径文件名
            </summary>
            <param name="RemoteFileName">远程文件名</param>
            <param name="LocalFullPath">本地完整路径文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.client_DownloadFileCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            异步下载文件完成之后触发的事件
            </summary>
            <param name="sender">下载对象</param>
            <param name="e">数据信息对象</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.client_DownloadProgressChanged(System.Object,System.Net.DownloadProgressChangedEventArgs)">
            <summary>
            异步下载进度发生改变触发的事件
            </summary>
            <param name="sender">下载对象</param>
            <param name="e">进度信息对象</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFile(System.String)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFile(System.String,System.Boolean)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFile(System.String,System.String)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFile(System.String,System.String,System.Boolean)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件名</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFile(System.Byte[],System.String)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="FileBytes">上传的二进制数据</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="FileBytes">文件二进制内容</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFileAsync(System.String)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFileAsync(System.String,System.Boolean)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFileAsync(System.String,System.String)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="LocalFullPath">本地带有完整路径的文件名</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFileAsync(System.Byte[],System.String)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="FileBytes">上传的二进制数据</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.UploadFileAsync(System.Byte[],System.String,System.Boolean)">
            <summary>
            异步上传文件到FTP服务器
            </summary>
            <param name="FileBytes">文件二进制内容</param>
            <param name="RemoteFileName">要在FTP服务器上面保存文件名</param>
            <param name="OverWriteRemoteFile">是否覆盖远程服务器上面同名的文件</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.client_UploadFileCompleted(System.Object,System.Net.UploadFileCompletedEventArgs)">
            <summary>
            异步上传文件完成之后触发的事件
            </summary>
            <param name="sender">下载对象</param>
            <param name="e">数据信息对象</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.client_UploadProgressChanged(System.Object,System.Net.UploadProgressChangedEventArgs)">
            <summary>
            异步上传进度发生改变触发的事件
            </summary>
            <param name="sender">下载对象</param>
            <param name="e">进度信息对象</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.ListFilesAndDirectories">
            <summary>
            列出FTP服务器上面当前目录的所有文件和目录
            </summary>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.ListFiles">
            <summary>
            列出FTP服务器上面当前目录的所有文件
            </summary>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.ListDirectories">
            <summary>
            列出FTP服务器上面当前目录的所有的目录
            </summary>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.GetList(System.String)">
            <summary>
            获得文件和目录列表
            </summary>
            <param name="datastring">FTP返回的列表字符信息</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.ParseFileStructFromWindowsStyleRecord(System.String)">
            <summary>
            从Windows格式中返回文件信息
            </summary>
            <param name="Record">文件信息</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.GuessFileListStyle(System.String[])">
            <summary>
            判断文件列表的方式Window方式还是Unix方式
            </summary>
            <param name="recordList">文件信息列表</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.ParseFileStructFromUnixStyleRecord(System.String)">
            <summary>
            从Unix格式中返回文件信息
            </summary>
            <param name="Record">文件信息</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient._cutSubstringFromStringWithTrim(System.String@,System.Char,System.Int32)">
            <summary>
            按照一定的规则进行字符串截取
            </summary>
            <param name="s">截取的字符串</param>
            <param name="c">查找的字符</param>
            <param name="startIndex">查找的位置</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.DirectoryExist(System.String)">
            <summary>
            判断当前目录下指定的子目录是否存在
            </summary>
            <param name="RemoteDirectoryName">指定的目录名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.FileExist(System.String)">
            <summary>
            判断一个远程文件是否存在服务器当前目录下面
            </summary>
            <param name="RemoteFileName">远程文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.DeleteFile(System.String)">
            <summary>
            从FTP服务器上面删除一个文件
            </summary>
            <param name="RemoteFileName">远程文件名</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.ReName(System.String,System.String)">
            <summary>
            更改一个文件的名称或一个目录的名称
            </summary>
            <param name="RemoteFileName">原始文件或目录名称</param>
            <param name="NewFileName">新的文件或目录的名称</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.CopyFileToAnotherDirectory(System.String,System.String)">
            <summary>
            把当前目录下面的一个文件拷贝到服务器上面另外的目录中，注意，拷贝文件之后，当前工作目录还是文件原来所在的目录
            </summary>
            <param name="RemoteFile">当前目录下的文件名</param>
            <param name="DirectoryName">新目录名称。
            说明：如果新目录是当前目录的子目录，则直接指定子目录。如: SubDirectory1/SubDirectory2 ；
            如果新目录不是当前目录的子目录，则必须从根目录一级一级的指定。如： ./NewDirectory/SubDirectory1/SubDirectory2
            </param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.MoveFileToAnotherDirectory(System.String,System.String)">
            <summary>
            把当前目录下面的一个文件移动到服务器上面另外的目录中，注意，移动文件之后，当前工作目录还是文件原来所在的目录
            </summary>
            <param name="RemoteFile">当前目录下的文件名</param>
            <param name="DirectoryName">新目录名称。
            说明：如果新目录是当前目录的子目录，则直接指定子目录。如: SubDirectory1/SubDirectory2 ；
            如果新目录不是当前目录的子目录，则必须从根目录一级一级的指定。如： ./NewDirectory/SubDirectory1/SubDirectory2
            </param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.MakeDirectory(System.String)">
            <summary>
            在FTP服务器上当前工作目录建立一个子目录
            </summary>
            <param name="DirectoryName">子目录名称</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.RemoveDirectory(System.String)">
            <summary>
            从当前工作目录中删除一个子目录
            </summary>
            <param name="DirectoryName">子目录名称</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.IsValidPathChars(System.String)">
            <summary>
            判断目录名中字符是否合法
            </summary>
            <param name="DirectoryName">目录名称</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.IsValidFileChars(System.String)">
            <summary>
            判断文件名中字符是否合法
            </summary>
            <param name="FileName">文件名称</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.GotoDirectory(System.String)">
            <summary>
            进入一个目录
            </summary>
            <param name="DirectoryName">
            新目录的名字。 
            说明：如果新目录是当前目录的子目录，则直接指定子目录。如: SubDirectory1/SubDirectory2 ； 
            如果新目录不是当前目录的子目录，则必须从根目录一级一级的指定。如： ./NewDirectory/SubDirectory1/SubDirectory2
            </param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.EnterOneSubDirectory(System.String)">
            <summary>
            从当前工作目录进入一个子目录
            </summary>
            <param name="DirectoryName">子目录名称</param>
        </member>
        <member name="M:Borui.Common.Net.FtpClient.ComeoutDirectory">
            <summary>
            从当前工作目录往上一级目录
            </summary>
        </member>
        <member name="P:Borui.Common.Net.FtpClient.Uri">
            <summary>
            FTP服务器地址
            </summary>
        </member>
        <member name="P:Borui.Common.Net.FtpClient.DirectoryPath">
            <summary>
            当前工作目录
            </summary>
        </member>
        <member name="P:Borui.Common.Net.FtpClient.UserName">
            <summary>
            FTP登录用户
            </summary>
        </member>
        <member name="P:Borui.Common.Net.FtpClient.ErrorMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Borui.Common.Net.FtpClient.Password">
            <summary>
            FTP登录密码
            </summary>
        </member>
        <member name="P:Borui.Common.Net.FtpClient.Proxy">
            <summary>
            连接FTP服务器的代理服务
            </summary>
        </member>
        <member name="E:Borui.Common.Net.FtpClient.DownloadProgressChanged">
            <summary>
            异步下载进度发生改变触发的事件
            </summary>
        </member>
        <member name="E:Borui.Common.Net.FtpClient.DownloadDataCompleted">
            <summary>
            异步下载文件完成之后触发的事件
            </summary>
        </member>
        <member name="E:Borui.Common.Net.FtpClient.UploadProgressChanged">
            <summary>
            异步上传进度发生改变触发的事件
            </summary>
        </member>
        <member name="E:Borui.Common.Net.FtpClient.UploadFileCompleted">
            <summary>
            异步上传文件完成之后触发的事件
            </summary>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.AddRequestHeader(System.String,System.String)">
            <summary>
            添加http标头
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.#ctor(System.String)">
            <summary>
            构造新的HttpUtil实例
            </summary>
            <param name="url">请求的 Internet 资源的统一资源标识符</param>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.#ctor(System.String,System.String)">
            <summary>
            构造新的HttpUtil实例
            </summary>
            <param name="url">请求的 Internet 资源的统一资源标识符</param>
            <param name="referer">Referer HTTP 标头的值</param>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.#ctor(System.String,System.String,System.String)">
            <summary>
            构造新的HttpUtil实例
            </summary>
            <param name="url">请求的 Internet 资源的统一资源标识符</param>
            <param name="referer">Referer HTTP 标头的值</param>
            <param name="cookieHeader">Cookie HTTP 标头的值</param>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.AttachFile(System.String,System.String)">
            <summary>
            在请求中添加要上传的文件
            </summary>
            <param name="fieldName">文件字段的名称</param>
            <param name="fileName">要上传的文件完整路径</param>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.AddPostData(System.String,System.String)">
            <summary>
            在请求中添加要上传的数据
            </summary>
            <param name="fieldName">普通字段的名称</param>
            <param name="fieldValue">普通字段的值</param>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.Reset">
            <summary>
            清空Post的数据,并把Method设置为Get
            在发出一个包含上述信息的请求后,必须调用此方法或手工设置相应属性以使下一次请求不会受到影响
            </summary>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.GetResponse(System.Boolean)">
            <summary>
            发出一次新的请求,并返回获得的回应
            </summary>
            <returns>相应的HttpWebResponse</returns>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.GetHTMLString(System.Boolean)">
            <summary>
            发出一次新的请求,并返回获得的回应
            </summary>
            <returns>请求页面的HTML代码</returns>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.GetHTMLString(System.Net.HttpWebResponse)">
            <summary>
            根据已有的HttpWebResponse返回获得的回应
            </summary>
            <param name="rep">已有的HttpWebResponse</param>
            <returns>请求页面的HTML代码</returns>
        </member>
        <member name="M:Borui.Common.Net.HttpUtil.GetEncodingFromResponse(System.Net.HttpWebResponse)">
            <summary>
            根据http应答的http头来判断编码
            </summary>
            <param name="rep">产生的HttpWebResponse</param>
            <returns></returns>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.Accept">
            <summary>
            获取或设置 Accept HTTP 标头的值
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.UserAgent">
            <summary>
            获取或设置 User-agent HTTP 标头的值
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.Method">
            <summary>
            获取或设置请求的方法(Get请求还是Post请求)
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.ContentType">
            <summary>
            获取或设置 Content-type HTTP 标头的值
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.KeepAlive">
            <summary>
            获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.AllowAutoRedirect">
            <summary>
            获取或设置一个值，该值指示请求是否应跟随重定向响应
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.Expect100Continue">
            <summary>
            获取或设置是否使用 100-Continue 行为
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.TimeOut">
            <summary>
            获取或设置请求超时前等待的毫秒数。
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.Url">
            <summary>
            获取或设置实际响应请求的 Internet 资源的统一资源标识符
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.Referer">
            <summary>
            获取或设置 Referer HTTP 标头的值
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.CookieHeader">
            <summary>
            获取或设置 Cookie HTTP 标头的值
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.AddWWWToUrl">
            <summary>
            获取或设置Url是否补上www
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.Files">
            <summary>
            要上传的文件.如果不为空则自动转为Post请求
            </summary>
        </member>
        <member name="P:Borui.Common.Net.HttpUtil.PostingData">
            <summary>
            要发送的Form表单信息
            </summary>
        </member>
        <member name="T:Borui.Common.Net.OAuth.Manager">
            <summary>
              A class to manage OAuth interactions.  This works with
              Twitter, not sure about other OAuth-enabled services.
            </summary>
            <remarks>
              <para>
                This class holds the relevant oauth parameters, and exposes
                methods that do things, based on those params.
              </para>
              <para>
                See http://dev.twitpic.com/docs/2/upload/ for an example of the
                oauth parameters.  The params include token, consumer_key,
                timestamp, version, and so on.  In the actual HTTP message, they
                all include the oauth_ prefix, so ..  oauth_token,
                oauth_timestamp, and so on.  You set these via a string indexer.
                If the instance of the class is called oauth, then to set
                the oauth_token parameter, you use oath["token"] in C#.
              </para>
              <para>
                This class automatically sets many of the required oauth parameters;
                this includes the timestamp, nonce, callback, and version parameters.
                (The callback param is initialized to 'oob'). You can reset any of
                these parameters as you see fit.  In many cases you won't have to.
              </para>
              <para>
                The public methods on the class include:
                AcquireRequestToken, AcquireAccessToken,
                GenerateCredsHeader, and GenerateAuthzHeader.  The
                first two are used only on the first run of an applicaiton,
                or after a user has explicitly de-authorized an application
                for use with OAuth.  Normally, the GenerateXxxHeader methods
                can be used repeatedly, when sending HTTP messages that
                require an OAuth Authorization header.
              </para>
              <para>
                The AcquireRequestToken and AcquireAccessToken methods
                actually send out HTTP messages.
              </para>
              <para>
                The GenerateXxxxHeaders are used when constructing and
                sending your own HTTP messages.
              </para>
            </remarks>
        </member>
        <member name="M:Borui.Common.Net.OAuth.Manager.#ctor">
            <remarks>
              <para>
                Initializes various fields to default values.
              </para>
            </remarks>
        </member>
        <member name="M:Borui.Common.Net.OAuth.Manager.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
              The constructor to use when using OAuth when you already
              have an OAuth access token.
            </summary>
            <remarks>
              <para>
                The parameters for this constructor all have the
                meaning you would expect.  The token and tokenSecret
                are set in oauth_token, and oauth_token_secret.
                These are *Access* tokens, obtained after a call
                to AcquireAccessToken.  The application can store
                those tokens and re-use them on successive runs.
                For twitter at least, the access tokens never expire.
              </para>
            </remarks>
        </member>
        <member name="M:Borui.Common.Net.OAuth.Manager.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature.
            </summary>
            <returns>The timestamp, in string form.</returns>
        </member>
        <!-- 对于成员“M:Borui.Common.Net.OAuth.Manager.NewRequest”忽略有格式错误的 XML 注释 -->
        <member name="M:Borui.Common.Net.OAuth.Manager.GenerateNonce">
            <summary>
            Generate an oauth nonce(Guid). 
            </summary>>
        </member>
        <!-- 对于成员“M:Borui.Common.Net.OAuth.Manager.ExtractQueryParameters(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Borui.Common.Net.OAuth.Manager.UrlEncode(System.String)">
             <summary>
               This is an oauth-compliant Url Encoder.  The default .NET
               encoder outputs the percent encoding in lower case.  While this
               is not a problem with the percent encoding defined in RFC 3986,
               OAuth (RFC 5849) requires that the characters be upper case
               throughout OAuth.
             </summary>
            
             <param name="value">The value to encode</param>
            
             <returns>the Url-encoded version of that string</returns>
        </member>
        <member name="M:Borui.Common.Net.OAuth.Manager.EncodeRequestParameters(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
             <summary>
             Formats the list of request parameters into string a according
             to the requirements of oauth. The resulting string could be used
             in the Authorization header of the request.
             </summary>
            
             <remarks>
               <para>
                 See http://dev.twitter.com/pages/auth#intro  for some
                 background.  The output of this is not suitable for signing.
               </para>
               <para>
                 There are 2 formats for specifying the list of oauth
                 parameters in the oauth spec: one suitable for signing, and
                 the other suitable for use within Authorization HTTP Headers.
                 This method emits a string suitable for the latter.
               </para>
             </remarks>
            
             <param name="parameters">The Dictionary of
             parameters. It need not be sorted.</param>
            
             <returns>a string representing the parameters</returns>
        </member>
        <!-- 对于成员“M:Borui.Common.Net.OAuth.Manager.AcquireRequestToken(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Borui.Common.Net.OAuth.Manager.AcquireAccessToken(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Borui.Common.Net.OAuth.Manager.CreateRequest(System.String)">
            <summary>
              Create default request with url
              <para>
                Method=Get
                ContentType is empty
              </para>
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Borui.Common.Net.OAuth.Manager.CreateRequest(System.String,System.String)">
            <summary>
              Create request with url
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Borui.Common.Net.OAuth.Manager.CreateRequest(System.String,System.String,System.String)">
            <summary>
            Create request with url
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Borui.Common.Net.OAuth.Manager.GetResponse">
            <summary>
              get response
            </summary>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.OAuth.Manager.GetResponseText">
            <summary>
              get response text
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Borui.Common.Net.OAuth.Manager.GenerateAuthzHeader”忽略有格式错误的 XML 注释 -->
        <member name="M:Borui.Common.Net.OAuth.Manager.GetSignatureBase">
            <summary>
            Formats the list of request parameters into "signature base" string as
            defined by RFC 5849.  This will then be MAC'd with a suitable hash.
            </summary>
        </member>
        <member name="P:Borui.Common.Net.OAuth.Manager.Item(System.String)">
            <summary>
              string indexer to get or set oauth parameter values.
            </summary>
            <remarks>
              <para>
                Use the parameter name *without* the oauth_ prefix.
                If you want to set the value for the oauth_token parameter
                field in an HTTP message, then use oauth["token"].
              </para>
              <para>
                The set of oauth param names known by this indexer includes:
                callback, consumer_key, consumer_secret, timestamp, nonce,
                signature_method, signature, token, token_secret, and version.
              </para>
              <para>
                If you try setting a parameter with a name that is not known,
                the setter will throw.  You cannot add new oauth parameters
                using the setter on this indexer.
              </para>
            </remarks>
        </member>
        <member name="T:Borui.Common.Net.Pop3.EmailUid">
            <summary>
            Combines Email ID with Email UID for one email
            The POP3 server assigns to each message a unique Email UID, which will not change for the life time
            of the message and no other message should use the same.
            
            Exceptions:
            Throws Pop3Exception if there is a serious communication problem with the POP3 server, otherwise
            
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.EmailUid.EmailId">
            <summary>
            used in POP3 commands to indicate which message (only valid in the present session)
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.EmailUid.Uid">
            <summary>
            Uid is always the same for a message, regardless of session
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.EmailUid.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="EmailId"></param>
            <param name="Uid"></param>
        </member>
        <member name="T:Borui.Common.Net.Pop3.Pop3Exception">
            <summary>
            If anything goes wrong within Pop3MailClient, a Pop3Exception is raised
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3Exception.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3Exception.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="ErrorMessage"></param>
        </member>
        <member name="T:Borui.Common.Net.Pop3.Pop3ConnectionStateEnum">
            <summary>
            A pop 3 connection goes through the following states:
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3ConnectionStateEnum.None">
            <summary>
            undefined
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3ConnectionStateEnum.Disconnected">
            <summary>
            not connected yet to POP3 server
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3ConnectionStateEnum.Authorization">
            <summary>
            TCP connection has been opened and the POP3 server has sent the greeting. POP3 server expects user name and password
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3ConnectionStateEnum.Connected">
            <summary>
            client has identified itself successfully with the POP3, server has locked all messages 
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3ConnectionStateEnum.Closed">
            <summary>
            QUIT command was sent, the server has deleted messages marked for deletion and released the resources
            </summary>
        </member>
        <member name="T:Borui.Common.Net.Pop3.WarningHandler">
            <summary>
            If POP3 Server doesn't react as expected or this code has a problem, but
            can continue with the execution, a Warning is called.
            </summary>
            <param name="WarningText"></param>
            <param name="Response">string received from POP3 server</param>
        </member>
        <member name="T:Borui.Common.Net.Pop3.TraceHandler">
            <summary>
            Traces all the information exchanged between POP3 client and POP3 server plus some
            status messages from POP3 client.
            Helpful to investigate any problem.
            Console.WriteLine() can be used
            </summary>
            <param name="TraceText"></param>
        </member>
        <member name="T:Borui.Common.Net.Pop3.Pop3MailClient">
            <summary>
            provides access to emails on a POP3 Server
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.CallWarning(System.String,System.String,System.String,System.Object[])">
            <summary>
            call warning event
            </summary>
            <param name="methodName">name of the method where warning is needed</param>
            <param name="response">answer from POP3 server causing the warning</param>
            <param name="warningText">explanation what went wrong</param>
            <param name="warningParameters"></param>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.CallTrace(System.String,System.Object[])">
            <summary>
            call Trace event
            </summary>
            <param name="text">string to be traced</param>
            <param name="parameters"></param>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.TraceFrom(System.String,System.Object[])">
            <summary>
            Trace information received from POP3 server
            </summary>
            <param name="text">string to be traced</param>
            <param name="parameters"></param>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.popServer">
            <summary>
            POP3 server name
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.port">
            <summary>
            POP3 server port
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.useSSL">
            <summary>
            Should SSL be used for connection with POP3 server ?
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.readTimeout">
            <summary>
            POP3 server read timeout
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.username">
            <summary>
            Owner name of mailbox on POP3 server
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.password">
            <summary>
            Password for mailbox on POP3 server
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.pop3ConnectionState">
            <summary>
            connection status with POP3 server
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.setPop3ConnectionState(Borui.Common.Net.Pop3.Pop3ConnectionStateEnum)">
            <summary>
            set POP3 connection state
            </summary>
            <param name="State"></param>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.EnsureState(Borui.Common.Net.Pop3.Pop3ConnectionStateEnum)">
            <summary>
            throw exception if POP3 connection is not in the required state
            </summary>
            <param name="requiredState"></param>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.serverTcpConnection">
            <summary>
            TCP to POP3 server
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.pop3Stream">
            <summary>
            Stream from POP3 server with or without SSL
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.pop3StreamReader">
            <summary>
            Reader for POP3 message
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.CRLF">
            <summary>
            char 'array' for carriage return / line feed
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Make POP3 client ready to connect to POP3 server
            </summary>
            <param name="PopServer"><example>pop.gmail.com</example></param>
            <param name="Port"><example>995</example></param>
            <param name="useSSL">True: SSL is used for connection to POP3 server</param>
            <param name="Username"><example>abc@gmail.com</example></param>
            <param name="Password">Secret</param>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.Connect">
            <summary>
            Connect to POP3 server
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.Disconnect">
            <summary>
            Disconnect from POP3 Server
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.DeleteEmail(System.Int32)">
            <summary>
            Delete message from server.
            The POP3 server marks the message as deleted.  Any future
            reference to the message-number associated with the message
            in a POP3 command generates an error.  The POP3 server does
            not actually delete the message until the POP3 session
            enters the UPDATE state.
            </summary>
            <param name="msg_number"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.GetEmailIdList(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Get a list of all Email IDs available in mailbox
            </summary>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.GetEmailSize(System.Int32)">
            <summary>
            get size of one particular email
            </summary>
            <param name="msg_number"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.GetUniqueEmailIdList(System.Collections.Generic.List{Borui.Common.Net.Pop3.EmailUid}@)">
            <summary>
            Get a list with the unique IDs of all Email available in mailbox.
            
            Explanation:
            EmailIds for the same email can change between sessions, whereas the unique Email id
            never changes for an email.
            </summary>
            <param name="EmailIds"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.GetUniqueEmailIdList(System.Collections.Generic.SortedList{System.String,System.Int32}@)">
            <summary>
            get a list with all currently available messages and the UIDs
            </summary>
            <param name="EmailIds">EmailId Uid list</param>
            <returns>false: server sent negative response (didn't send list)</returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.GetUniqueEmailId(Borui.Common.Net.Pop3.EmailUid)">
            <summary>
            get size of one particular email
            </summary>
            <param name="msg_number"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.NOOP">
            <summary>
            Sends an 'empty' command to the POP3 server. Server has to respond with +OK
            </summary>
            <returns>true: server responds as expected</returns>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.isTraceRawEmail">
            <summary>
            Should the raw content, the US-ASCII code as received, be traced
            GetRawEmail will switch it on when it starts and off once finished
            
            Inheritors might use it to get the raw email
            </summary>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.RawEmailSB">
            <summary>
            contains one MIME part of the email in US-ASCII, needs to be translated in .NET string (Unicode)
            contains the complete email in US-ASCII, needs to be translated in .NET string (Unicode)
            For speed reasons, reuse StringBuilder
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.GetRawEmail(System.Int32,System.String@)">
            <summary>
            Reads the complete text of a message
            </summary>
            <param name="MessageNo">Email to retrieve</param>
            <param name="EmailText">ASCII string of complete message</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.UndeleteAllEmails">
            <summary>
            Unmark any emails from deletion. The server only deletes email really
            once the connection is properly closed.
            </summary>
            <returns>true: emails are unmarked from deletion</returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.GetMailboxStats(System.Int32@,System.Int32@)">
            <summary>
            Get mailbox statistics
            </summary>
            <param name="NumberOfMails"></param>
            <param name="MailboxSize"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.SendRetrCommand(System.Int32)">
            <summary>
            Send RETR command to POP 3 server to fetch one particular message
            </summary>
            <param name="MessageNo">ID of message required</param>
            <returns>false: negative server respond, message not delivered</returns>
        </member>
        <member name="F:Borui.Common.Net.Pop3.Pop3MailClient.isDebug">
            <summary>
            sends the 4 letter command to POP3 server (adds CRLF) and waits for the
            response of the server
            </summary>
            <param name="command">command to be sent to server</param>
            <param name="response">answer from server</param>
            <returns>false: server sent negative acknowledge, i.e. server could not execute command</returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.executeReconnect(System.IO.IOException,System.String,System.Byte[])">
            <summary>
            reconnect, if there is a timeout exception and isAutoReconnect is true
            
            </summary>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.readSingleLine(System.String@)">
            <summary>
            read single line response from POP3 server. 
            <example>Example server response: +OK asdfkjahsf</example>
            </summary>
            <param name="response">response from POP3 server</param>
            <returns>true: positive response</returns>
        </member>
        <member name="M:Borui.Common.Net.Pop3.Pop3MailClient.readMultiLine(System.String@)">
            <summary>
            read one line in multiline mode from the POP3 server. 
            </summary>
            <param name="response">line received</param>
            <returns>false: end of message</returns>
            <returns></returns>
        </member>
        <member name="E:Borui.Common.Net.Pop3.Pop3MailClient.Warning">
            <summary>
            Called whenever POP3 server doesn't react as expected, but no runtime error is thrown.
            </summary>
        </member>
        <member name="E:Borui.Common.Net.Pop3.Pop3MailClient.Trace">
            <summary>
            Shows the communication between PopClient and PopServer, including warnings
            </summary>
        </member>
        <member name="P:Borui.Common.Net.Pop3.Pop3MailClient.PopServer">
            <summary>
            Get POP3 server name
            </summary>
        </member>
        <member name="P:Borui.Common.Net.Pop3.Pop3MailClient.Port">
            <summary>
            Get POP3 server port
            </summary>
        </member>
        <member name="P:Borui.Common.Net.Pop3.Pop3MailClient.UseSSL">
            <summary>
            Should SSL be used for connection with POP3 server ?
            </summary>
        </member>
        <member name="P:Borui.Common.Net.Pop3.Pop3MailClient.IsAutoReconnect">
            <summary>
            should Pop3MailClient automatically reconnect if POP3 server has dropped the 
            connection due to a timeout ?
            </summary>
        </member>
        <member name="P:Borui.Common.Net.Pop3.Pop3MailClient.ReadTimeout">
            <summary>
            Get / set read timeout (miliseconds)
            </summary>
        </member>
        <member name="P:Borui.Common.Net.Pop3.Pop3MailClient.Username">
            <summary>
            Get owner name of mailbox on POP3 server
            </summary>
        </member>
        <member name="P:Borui.Common.Net.Pop3.Pop3MailClient.Password">
            <summary>
            Get password for mailbox on POP3 server
            </summary>
        </member>
        <member name="P:Borui.Common.Net.Pop3.Pop3MailClient.Pop3ConnectionState">
            <summary>
            Get connection status with POP3 server
            </summary>
        </member>
        <member name="T:Borui.Common.Result">
            <summary>
            结果类
            </summary>
        </member>
        <member name="M:Borui.Common.Result.AddMessage(System.String,System.Object[])">
            <summary>
            添加消息
            </summary>
            <param name="msg"></param>
            <param name="args"></param>
        </member>
        <member name="M:Borui.Common.Result.AddMessage(System.Exception)">
            <summary>
            添加异常消息
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:Borui.Common.Result.GetMessage(Borui.Common.MessageSplitType)">
            <summary>
            获取消息
            </summary>
            <param name="split">消息分隔符,默认以<br/>分隔</param>
            <returns></returns>
        </member>
        <member name="T:Borui.Common.ResultStatus">
            <summary>
            Result状态
            </summary>
        </member>
        <member name="F:Borui.Common.ResultStatus.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Borui.Common.ResultStatus.Failure">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Borui.Common.ResultStatus.SuccessWithWarnning">
            <summary>
            带有可忽略错误的成功
            </summary>
        </member>
        <member name="F:Borui.Common.ResultStatus.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Borui.Common.MessageSplitType.Br">
            <summary>
            以<br/>为分隔符
            </summary>
        </member>
        <member name="F:Borui.Common.MessageSplitType.NewLine">
            <summary>
            以\r\n分隔符
            </summary>
        </member>
        <member name="F:Borui.Common.MessageSplitType.Space">
            <summary>
            以空格为分隔符
            </summary>
        </member>
        <member name="F:Borui.Common.MessageSplitType.None">
            <summary>
            无分隔符
            </summary>
        </member>
        <member name="M:Borui.Common.Security.Cryptography.DESCrypto.EncryptString(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="input">输入</param>
            <returns>输出</returns>
        </member>
        <member name="M:Borui.Common.Security.Cryptography.DESCrypto.DecryptString(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="input">输入</param>
            <returns>输出</returns>
        </member>
        <member name="T:Borui.Security.DataEncryptBase">
            <summary>
            数据加密积累
            </summary>
        </member>
        <member name="M:Borui.Security.DataEncryptBase.Encrypt">
            <summary>
            加密
            </summary>
            <returns></returns>
        </member>
        <member name="M:Borui.Security.DataEncryptBase.Decrypt">
            <summary>
            解密
            </summary>
            <returns></returns>
        </member>
        <member name="P:Borui.Security.DataEncryptBase.Key">
            <summary>
            密匙
            </summary>
        </member>
        <member name="P:Borui.Security.DataEncryptBase.PlainText">
            <summary>
            明文
            </summary>
        </member>
        <member name="P:Borui.Security.DataEncryptBase.CipherText">
            <summary>
            密文
            </summary>
        </member>
        <member name="T:Borui.Security.DES">
            <summary>
            DES 加密
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.DatabaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.SqlText">
            <summary>
            SQL 查询的文本。对于已加密对象为 NULL。
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.CreationTime">
            <summary>
            编译计划的时间。
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.LastExecutionTime">
            <summary>
            上次开始执行计划的时间。
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.ExecutionCount">
            <summary>
            计划自上次编译以来所执行的次数。
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.TotalWorkerTime">
            <summary>
            此计划自编译以来执行所用的 CPU 时间总量（以微秒为单位报告，但仅精确到毫秒）
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.LastWorkerTime">
            <summary>
            上次执行计划所用的 CPU 时间（以微秒为单位报告，但仅精确到毫秒）
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MinWorkerTime">
            <summary>
            此计划在单次执行期间所用的最小 CPU 时间（以微秒为单位报告，但仅精确到毫秒）
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MaxWorkerTime">
            <summary>
            此计划在单次执行期间所用的最大 CPU 时间（以微秒为单位报告，但仅精确到毫秒）
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.TotalPhysicalReads">
            <summary>
            此计划自编译后在执行期间所执行的物理读取总次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.LastPhysicalReads">
            <summary>
            上次执行计划时所执行的物理读取次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MinPhysicalReads">
            <summary>
            该计划在单个执行期间所执行的最少物理读取次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MaxPhysicalReads">
            <summary>
            该计划在单个执行期间所执行的最多物理读取次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.TotalLogicalWrites">
            <summary>
            此计划自编译后在执行期间所执行的逻辑写入总次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.LastLogicalWrites">
            <summary>
            上次执行计划时变脏的缓冲池页的数目。 如果某页已变脏（已修改），则不对写进行计数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MinLogicalWrites">
            <summary>
            该计划在单个执行期间所执行的最少逻辑写入次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MaxLogicalWrites">
            <summary>
            该计划在单个执行期间所执行的最多逻辑写入次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.TotalLogicalReads">
            <summary>
            此计划自编译后在执行期间所执行的逻辑读取总次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.LastLogicalReads">
            <summary>
            上次执行计划时所执行的逻辑读取次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MinLogicalReads">
            <summary>
            该计划在单个执行期间所执行的最少逻辑读取次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MaxLogicalReads">
            <summary>
            该计划在单个执行期间所执行的最多逻辑读取次数
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.TotalCLRTime">
            <summary>
            编译计划后，因执行此计划而在 Microsoft .NET Framework 公共语言运行时 (CLR) 对象内使用的时间（以微秒为单位报告，但仅精确到毫秒）。
            CLR 对象可以是存储过程、函数、触发器、类型和聚合
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.LastCLRTime">
            <summary>
            在上一次执行此计划期间，在 .NET Framework 公共语言运行时 (CLR) 对象内执行所用的时间（以微秒为单位报告，但仅精确到毫秒）。 
            CLR 对象可以是存储过程、函数、触发器、类型和聚合
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MinCLRTime">
            <summary>
            此计划在单次执行期间在 .NET Framework CLR 对象内所用的最小时间（以微秒为单位报告，但仅精确到毫秒）。
            CLR 对象可以是存储过程、函数、触发器、类型和聚合
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MaxCLRTime">
            <summary>
            此计划在单次执行期间在 .NET Framework CLR 内所用的最大时间（以微秒为单位报告，但仅精确到毫秒）。 
            CLR 对象可以是存储过程、函数、触发器、类型和聚合。
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.TotalElapsedTime">
            <summary>
            上次完成执行此计划所用的总时间（以微秒为单位报告，但仅精确到毫秒）
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.LastElapsedTime">
            <summary>
            最近一次完成执行此计划所用的时间（以微秒为单位报告，但仅精确到毫秒）
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MinElapsedTime">
            <summary>
            任何一次完成执行此计划所用的最小时间（以微秒为单位报告，但仅精确到毫秒）
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MaxElapsedTime">
            <summary>
            任何一次完成执行此计划所用的最大时间（以微秒为单位报告，但仅精确到毫秒）
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.TotalRows">
            <summary>
            查询返回的总行数。 不能为 Null
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.LastRows">
            <summary>
            上一次执行查询返回的行数。 不能为 Null
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MinRows">
            <summary>
            查询自上次编译以来已执行计划的次数所返回的最小行数。 不能为 Null
            </summary>
        </member>
        <member name="P:Borui.Common.SqlQueryStat.MaxRows">
            <summary>
            查询自上次编译以来已执行计划的次数所返回的最大行数。 不能为 Null
            </summary>
        </member>
        <member name="T:Borui.Common.Sql.DBTable">
            <summary>
            数据表
            </summary>
        </member>
        <member name="M:Borui.Common.Sql.DBTable.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Borui.Common.Sql.DBTable.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Borui.Common.Sql.DBTable.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.Columns">
            <summary>
            列集合
            </summary>
        </member>
        <member name="T:Borui.Common.Sql.DBTable.Column">
            <summary>
            数据列
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.Column.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.Column.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.Column.IsKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.Column.AllowNull">
            <summary>
            是否可以为空
            </summary>
        </member>
        <member name="T:Borui.Common.Sql.DBTable.Column.Identity">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:Borui.Common.Sql.DBTable.Column.Identity.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <param name="step"></param>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.Column.Identity.Seed">
            <summary>
            标识种子
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.Column.Identity.Step">
            <summary>
            标识增量
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DBTable.ColumnCollection.Count">
            <summary>
            获取集合的元素数
            </summary>
        </member>
        <member name="M:Borui.Common.Sql.DbConfig.ToString">
            <summary>
            根据不同的数据库类型，生成对应的数据库连接字符串
            </summary>
            <returns>数据库连接字符串</returns>
        </member>
        <member name="P:Borui.Common.Sql.DbConfig.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DbConfig.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DbConfig.DbName">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DbConfig.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DbConfig.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.DbConfig.ConnectionString">
            <summary>
            直接使用连接字符串
            </summary>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.BulkInsertToDatabase(System.String,System.Data.DataTable)">
            <summary>
            批量导入数据
            </summary>
            <param name="connectionString">将要导入数据库的连接字符串</param>
            <param name="table">数据源</param>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.BulkInsertToDatabase(System.String,System.String,System.Data.DataTable)">
            <summary>
            批量导入数据
            </summary>
            <param name="connectionString">将要导入数据库的连接字符串</param>
            <param name="tableName">数据库中对应表名</param>
            <param name="table">数据源</param>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.BulkInsertToDatabase(System.String,System.String,System.Collections.Hashtable,System.Data.DataTable)">
            <summary>
            批量导入数据
            </summary>
            <param name="connectionString">将要导入数据库的连接字符串</param>
            <param name="tableName">数据库中对应表名</param>
            <param name="columnsMapping">对应字段映射</param>
            <param name="table">数据源</param>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.TruncateTable(System.String,System.String)">
            <summary>
            清空表 run sql truncate table
            </summary>
            <param name="conn"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.TruncateTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            清空表 run sql truncate table
            </summary>
            <param name="conn"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.GetRecordsCount(System.String,System.String)">
            <summary>
            获取数据表内记录的总数量
            </summary>
            <param name="connectionString"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.GetRecordsCount(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            获取数据表内记录的总数量
            </summary>
            <param name="conn"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.RunSqlFile(System.String,System.String,System.String@)">
            <summary>
            执行sql文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="msg">返回信息</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.RunSqlFile(System.String[],System.String,System.String@)">
            <summary>
            执行sql文件组
            </summary>
            <param name="fileName">文件组名</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="msg">返回信息</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.IsTableExist(System.String,System.String)">
            <summary>
            判断表是否存在
            </summary>
            <param name="tableName">表名</param>
            <param name="connectionString">连接字符串</param>
            <returns>存在返回true,不存在返回false</returns>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.GetTablesInfo(System.String[],System.String)">
            <summary>
            获取表信息
            </summary>
            <param name="tableName">表名</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.GetExecQueryStats(System.String,System.Int32,Borui.Common.SqlQueryStat.OrderType)">
            <summary>
            GetExecQueryStats
            </summary>
            <param name="connectionString"></param>
            <param name="topCount"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.CreateDatabase(System.String,System.String)">
            <summary>
            创建数据库
            </summary>
            <param name="connectionString"></param>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Sql.SqlHelper.CreateTable(System.String,Borui.Common.Sql.DBTable)">
            <summary>
            创建数据表
            </summary>
            <returns></returns>
        </member>
        <member name="F:Borui.Common.Sql.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Borui.Common.Sql.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="M:Borui.Common.Sql.SqlUtils.ExecuteSqlQuery(System.String,System.String)">
            <summary>
            Execute sql query
            </summary>
            <param name="query">Sql query</param>
            <param name="connectionstring"></param>
        </member>
        <member name="M:Borui.Common.Sql.SqlUtils.GetValue(System.Object)">
            <summary>
            get object value
            </summary>
            <param name="value"></param>
            <returns>DBNull.Value if value == null</returns>
        </member>
        <member name="T:Borui.Common.Sql.TableBase">
            <summary>
            访问数据表的基础类
            </summary>
        </member>
        <member name="M:Borui.Common.Sql.TableBase.Insert(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            插入数据到数据库
            </summary>
            <param name="values">列和值得序列，比如：username=a;password=b;email=c;</param>
            <returns>第一行第一列的值</returns>
        </member>
        <member name="M:Borui.Common.Sql.TableBase.Get(System.String,System.String)">
            <summary>
            获取数据
            </summary>
            <param name="condition">条件，比如：ID = 1</param>
            <param name="orderby">排序，比如 ID desc</param>
            <returns>哈希表的列表：存在结果</returns>
        </member>
        <member name="M:Borui.Common.Sql.TableBase.Update(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新数据表
            </summary>
            <param name="primary_key">主键</param>
            <param name="primary_key_value">主键的值</param>
            <param name="fields">更新的列</param>
            <param name="values">更新的列的值</param>
        </member>
        <member name="M:Borui.Common.Sql.TableBase.Delete(System.String)">
            <summary>
            删除数据表
            </summary>
            <param name="condition"></param>
        </member>
        <member name="P:Borui.Common.Sql.TableBase.Fields">
            <summary>
            字段列表组成的字符串,形式如：[UserName],[Password],[Email]
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.TableBase.TableName">
            <summary>
            数据表的名称
            </summary>
        </member>
        <member name="P:Borui.Common.Sql.TableBase.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="T:Borui.Common.SystemTable">
            <summary>
            数据库系统表对象
            </summary>
        </member>
        <member name="P:Borui.Common.SystemTable.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Borui.Common.SystemTable.CreateDate">
            <summary>
            创建时间，如果表不存在返回Null
            </summary>
        </member>
        <member name="P:Borui.Common.Task.IAction.Item(System.String)">
            <summary>
            Provide a ability to save data
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Task.BaseAction.InitTable">
            <summary>
            use the TableName and TableFields init datatable(Data)
            to use it please set TableName and TableFields at first.
            </summary>
        </member>
        <member name="M:Borui.Common.Task.BaseAction.Save(System.Boolean)">
            <summary>
            bulk insert the data in datatable Data to database
            </summary>
            <param name="removeOld">whether delete old data before insert new</param>
        </member>
        <member name="P:Borui.Common.Task.BaseAction.ItemCount">
            <summary>
            the items count get, only available when you use Data property
            </summary>
        </member>
        <member name="P:Borui.Common.Task.BaseAction.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:Borui.Common.Task.BaseAction.TableName">
            <summary>
            the 
            </summary>
        </member>
        <member name="P:Borui.Common.Task.BaseAction.TableFields">
            <summary>
            the columns of table in database
            </summary>
        </member>
        <member name="P:Borui.Common.Task.BaseAction.Enabled">
            <summary>
            if the action is still under working, set it to false, or set it to true
            </summary>
        </member>
        <member name="M:Borui.Common.Task.Dao.BoruiDbcontext.#ctor(System.String)">
            <summary>
            create dbcontext with conectionstring name or conectionstring
            </summary>
            <param name="nameOrConnectionString">ConnectionString Name or ConnectionString</param>
        </member>
        <member name="P:Borui.Common.Task.Entity.BaseEmailMsg.From">
            <summary>
            from address
            </summary>
        </member>
        <member name="P:Borui.Common.Task.Entity.BaseEmailMsg.To">
            <summary>
            to address, split by ","
            </summary>
        </member>
        <member name="P:Borui.Common.Task.Entity.BaseEmailMsg.Bcc">
            <summary>
            bcc address, split by ','
            </summary>
        </member>
        <member name="T:Borui.Common.Task.GoogleCalendar">
            <summary>
            日历
            </summary>
        </member>
        <member name="T:Borui.Common.Task.GoogleCalendar.Ends">
            <summary> 
            结束日期
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.Ends.NeverSpecified">
            <summary>
            指定：从不
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.Ends.AfterOccur">
            <summary>
            几次之后：默认为 1
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.Ends.AfterOccurSpecified">
            <summary>
            指定：几次之后
            </summary>     
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.Ends.On">
            <summary>
            在某一天结束：默认为现在时间加 7 天
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.Ends.OnSpecified">
            <summary>
            指定：在某一天结束
            </summary>
        </member>
        <member name="T:Borui.Common.Task.GoogleCalendar.RepeatCommon">
            <summary>
            重复类型的一般方法
            </summary>
        </member>
        <member name="F:Borui.Common.Task.GoogleCalendar.RepeatCommon.MaxWeekCount">
            <summary>
            寻找的最大【周】数: 500
            </summary>
        </member>
        <member name="T:Borui.Common.Task.GoogleCalendar.RepeatFactory">
            <summary>
            工厂类
            </summary>
        </member>
        <member name="M:Borui.Common.Task.GoogleCalendar.RepeatFactory.Create(Borui.Common.Task.FreqCodeType)">
            <summary>
            根据【重复类型】创建实例
            </summary>
            <param name="RepeatType"></param>
            <returns></returns>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatFactory.RepeatEvery">
            <summary>
            重复频率
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatFactory.RepeatOn">
            <summary>
            重复时间：星期一到星期天组成的列表
            </summary>            
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatFactory.StartOn">
            <summary>
            开始日期
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatFactory.EndDate">
            <summary>
            结束日期
            </summary>
        </member>
        <member name="T:Borui.Common.Task.GoogleCalendar.IRepeatBase">
            <summary>
            重复类型接口
            </summary>
        </member>
        <member name="T:Borui.Common.Task.GoogleCalendar.RepeatDaily">
            <summary>
            重复类型：每天
            </summary>
        </member>
        <member name="M:Borui.Common.Task.GoogleCalendar.RepeatDaily.GetEndDate">
            <summary>
            获取结束日期
            </summary>    
        </member>
        <member name="M:Borui.Common.Task.GoogleCalendar.RepeatDaily.GetNextTime(System.DateTime,System.Int32)">
            <summary>
            获取第几次定时器事件发生时的时间，默认为 1
            </summary>
            <param name="AfterOccur">此参数没用到，如果指定的话，必须大于0</param>
            <returns></returns>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatDaily.RepeatEvery">
            <summary>
            重复频率：比如三天一次
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatDaily.StartOn">
            <summary>
            开始日期
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatDaily.EndDate">
            <summary>
            结束日期
            </summary>
        </member>
        <member name="T:Borui.Common.Task.GoogleCalendar.RepeatWeekly">
            <summary>
            重复类型：每周
            </summary>
        </member>
        <member name="M:Borui.Common.Task.GoogleCalendar.RepeatWeekly.GetEndDate">
            <summary>
            获取结束日期
            </summary>    
        </member>
        <member name="M:Borui.Common.Task.GoogleCalendar.RepeatWeekly.GetNextTime(System.DateTime,System.Int32)">
            <summary>
            获取第几次定时器事件发生时的时间，默认为 1( 也就是下次定时器时间 )
            </summary>
            <param name="AfterOccur">此参数必须大于 0</param>
            <returns></returns>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatWeekly.RepeatEvery">
            <summary>
            重复频率
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatWeekly.RepeatOn">
            <summary>
            重复时间：星期一到星期天组成的列表
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatWeekly.StartOn">
            <summary>
            开始日期
            </summary>
        </member>
        <member name="P:Borui.Common.Task.GoogleCalendar.RepeatWeekly.EndDate">
            <summary>
            结束日期
            </summary>
        </member>
        <member name="M:Borui.Common.Task.Scheduler.GetNext">
            <summary>
            获取循环的下一次时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Task.Scheduler.GetNext(Borui.Common.Task.OrdinalCodeType[],System.DayOfWeek,System.DateTime)">
            <summary>
            适用于每月运行的任务
            </summary>
            <param name="ordinal">第几周</param>
            <param name="weekday">星期几</param>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Task.Scheduler.GetNext(Borui.Common.Task.OrdinalCodeType,System.DayOfWeek,System.Int32)">
            <summary>
            适用于每月运行的任务
            </summary>
            <param name="ordinal">第几周</param>
            <param name="dayOfWeek">星期几</param>
            <param name="hour">第几小时</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Task.Scheduler.GetDate(System.Int32,System.Int32,Borui.Common.Task.OrdinalCodeType,System.DayOfWeek)">
            <summary>
            获取某年某月第几周的星期几
            </summary>
            <param name="year">年份</param>
            <param name="month">月</param>
            <param name="ordinal">第几周</param>
            <param name="dayOfWeek">星期几</param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Task.Scheduler.GetNextOrdinal(Borui.Common.Task.OrdinalCodeType[],Borui.Common.Task.OrdinalCodeType,System.DayOfWeek,System.Boolean@,System.Boolean@)">
            <summary>
            根据当前序列获取序列集合中的下一个
            </summary>
            <param name="ordinals"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.Common.Task.Scheduler.GetMonthNext(Borui.Common.Task.OrdinalCodeType[],System.DayOfWeek,System.DateTime)">
            <summary>
            
            </summary>
            <param name="ordinal">第几周</param>
            <param name="weekday">星期几</param>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="P:Borui.Common.Task.Scheduler.SchedulerType">
            <summary>
            循环类型
            </summary>
        </member>
        <member name="P:Borui.Common.Task.Scheduler.Interval">
            <summary>
            循环规则多长时间重复一次，默认值1
            对于Yearly表示每一年
            对于Daily表示每天
            对于Hourly表示每小时
            ……
            </summary>
        </member>
        <member name="P:Borui.Common.Task.Scheduler.CurrentDate">
            <summary>
            本次时间
            下一次的运行时间根据本次时间生成，如果不设置则为当前时间
            </summary>
        </member>
        <member name="P:Borui.Common.Task.Scheduler.SchedulerTime">
            <summary>
            时间,24小时制
            如： 06:00,19:00
            </summary>
        </member>
        <member name="F:Borui.Common.Task.FreqCodeType.Secondly">
            <summary>
            specify repeating events based on an interval of a second or more
            </summary>
        </member>
        <member name="F:Borui.Common.Task.FreqCodeType.Minutely">
            <summary>
             specify repeating events based on an interval of a minute or more
            </summary>
        </member>
        <member name="F:Borui.Common.Task.FreqCodeType.Hourly">
            <summary>
            specify repeating events based on an interval of an hour or more
            </summary>
        </member>
        <member name="F:Borui.Common.Task.FreqCodeType.Daily">
            <summary>
            specify repeating events based on an interval of a day or more
            </summary>
        </member>
        <member name="F:Borui.Common.Task.FreqCodeType.Weekly">
            <summary>
            specify repeating events based on an interval of a week or more
            </summary>
        </member>
        <member name="F:Borui.Common.Task.FreqCodeType.Monthly">
            <summary>
            specify repeating events based on an interval of a month or more
            </summary>
        </member>
        <member name="F:Borui.Common.Task.FreqCodeType.Yearly">
            <summary>
            specify repeating events based on an interval of a year or more
            </summary>
        </member>
        <member name="T:Borui.Common.Task.OrdinalCodeType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Borui.Common.Task.DayOfWeekEx">
            <summary>
            扩展的【DayOfWeek】
            </summary>
        </member>
        <member name="F:Borui.Common.Task.DayOfWeekEx.None">
            <summary>
            没有星期几
            </summary>
        </member>
        <member name="F:Borui.Common.Task.DayOfWeekEx.Sunday">
            <summary>
            星期日
            </summary>
        </member>
        <member name="F:Borui.Common.Task.DayOfWeekEx.Monday">
            <summary>
            星期一
            </summary>
        </member>
        <member name="F:Borui.Common.Task.DayOfWeekEx.Tuesday">
            <summary>
            星期二
            </summary>
        </member>
        <member name="F:Borui.Common.Task.DayOfWeekEx.Wednesday">
            <summary>
            星期三
            </summary>
        </member>
        <member name="F:Borui.Common.Task.DayOfWeekEx.Thursday">
            <summary>
            星期四
            </summary>
        </member>
        <member name="F:Borui.Common.Task.DayOfWeekEx.Friday">
            <summary>
            星期五
            </summary>
        </member>
        <member name="F:Borui.Common.Task.DayOfWeekEx.Saturday">
            <summary>
            星期六
            </summary>
        </member>
        <member name="M:Borui.Common.Web.RequestExtension.GetValue``1(System.Web.HttpRequestBase,System.String,``0)">
            <summary>
            获取Request对象中的值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="request">Request对象</param>
            <param name="key">名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.Interface.IDB.Open">
            <summary>
            打开数据源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.Interface.IDB.GetSqlTable(System.String)">
            <summary>
            执行SQL并返回DataTable
            </summary>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.Interface.IDB.GetSqlTable(System.String,System.Int32,System.Int32)">
            <summary>
            执行分页查询
            </summary>
            <param name="sqlText">sql语句</param>
            <param name="page">第几页</param>
            <param name="pageSize">页大小</param>
            <returns>返回第page页的内容</returns>
        </member>
        <member name="M:Borui.DB.Interface.IDB.ExecuteSQL(System.String)">
            <summary>
            执行SQL
            </summary>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.Interface.IDB.ExecuteSQL(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行SQL
            </summary>
            <param name="sqlText">sql数组</param>
            <param name="parameters">sql参数</param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.Interface.IDB.GetSqlReader(System.String)">
            <summary>
            执行SQL返回Reader
            </summary>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.Interface.IDB.Close">
            <summary>
            关闭数据源
            </summary>
            <returns></returns>
        </member>
        <member name="P:Borui.DB.Interface.IDB.Config">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="P:Borui.DB.BaseClass.DBConfig.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Borui.DB.BaseClass.DBConfig.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Borui.DB.BaseClass.DBConfig.DbName">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:Borui.DB.BaseClass.DBConfig.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="P:Borui.DB.BaseClass.DBConfig.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Borui.DB.MySql">
            <summary>
            MySql 访问类
            </summary>
        </member>
        <member name="M:Borui.DB.MySql.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Borui.DB.MySql.#ctor(Borui.DB.BaseClass.DBConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Borui.DB.MySql.Open">
            <summary>
            打开数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.MySql.GetSqlTable(System.String)">
            <summary>
            执行SQL并返回DataTable
            </summary>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.MySql.GetSqlTable(System.String,System.Int32,System.Int32)">
            <summary>
            执行分页查询
            </summary>
            <param name="sqlText"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.MySql.ExecuteSQL(System.String)">
            <summary>
            执行SQL
            </summary>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.MySql.ExecuteSQL(System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行SQL
            </summary>
            <param name="sqlTexts"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.MySql.GetSqlReader(System.String)">
            <summary>
            执行SQL返回Reader
            </summary>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Borui.DB.MySql.Close">
            <summary>
            关闭数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="P:Borui.DB.MySql.Config">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="P:Borui.DB.MySql.Conn">
            <summary>
            数据库连接
            </summary>
        </member>
    </members>
</doc>
